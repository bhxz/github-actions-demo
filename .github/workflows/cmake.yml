name: Build

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
        - os: ubuntu-latest
          name: linux-x64
        - os: macos-latest
          name: macos-x64

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Check CMake
      working-directory: ${{github.workspace}}/build
      run: cmake --version

    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_VEROBSE_MAKEFILE=ON

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE --target package

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C $BUILD_TYPE --output-on-failure

    - uses: actions/upload-artifact@v2
      with:
        name: hello-${{ matrix.name }}.tar.gz
        path: build/hello-*.tar.gz
  
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        type: [x64, Win32]
        include:
        - type: x64
          name: windows-x64[VS2019]
        - type: Win32
          name: windows-x86[VS2019]

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Check CMake
      working-directory: ${{github.workspace}}/build
      run: cmake --version

    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -A ${{ matrix.type }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE --target package

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C $BUILD_TYPE --output-on-failure

    - uses: actions/upload-artifact@v2
      with:
        name: hello-${{ matrix.name }}.tar.gz
        path: build/hello-*.tar.gz

  cross-compiling:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm-linux-gnueabihf, aarch64-linux-gnu, mips64el-linux-gnuabi64]
        include:
        - arch: arm-linux-gnueabihf
          name: linux-arm
          qemu: qemu-arm
        - arch: aarch64-linux-gnu
          name: linux-arm64
          qemu: qemu-aarch64
        - arch: mips64el-linux-gnuabi64
          name: linux-mips64
          qemu: qemu-mips64el

    steps:
    - uses: actions/checkout@v2

    - name: Install Gcc
      run: sudo apt-get update && sudo apt-get -y install gcc-${{ matrix.arch }} g++-${{ matrix.arch }} qemu-user

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Check CMake
      working-directory: ${{github.workspace}}/build
      run: cmake --version

    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/toolchains/${{ matrix.arch }}.cmake

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE --target package

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ${{ matrix.qemu }} -L ${{ matrix.arch }} -E LD_LIBRARY_PATH=. ./Test

    - uses: actions/upload-artifact@v2
      with:
        name: hello-${{ matrix.name }}.tar.gz
        path: build/hello-*.tar.gz
